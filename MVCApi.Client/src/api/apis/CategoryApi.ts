/* tslint:disable */
/* eslint-disable */
/**
 * MVCApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CategoryDto,
    CategoryDtoFromJSON,
    CategoryDtoToJSON,
    CreateCategory,
    CreateCategoryFromJSON,
    CreateCategoryToJSON,
    CreateSubcategory,
    CreateSubcategoryFromJSON,
    CreateSubcategoryToJSON,
} from '../models';

export interface ApiCategoryCreateCategoryPostRequest {
    createCategory?: CreateCategory;
}

export interface ApiCategoryCreateSubcategoryPostRequest {
    createSubcategory?: CreateSubcategory;
}

export interface ApiCategoryGetCategoryByIdIdGetRequest {
    id: string;
}

/**
 * 
 */
export class CategoryApi extends runtime.BaseAPI {

    /**
     */
    async apiCategoryCreateCategoryPostRaw(requestParameters: ApiCategoryCreateCategoryPostRequest): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Category/CreateCategory`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCategoryToJSON(requestParameters.createCategory),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async apiCategoryCreateCategoryPost(requestParameters: ApiCategoryCreateCategoryPostRequest): Promise<string> {
        const response = await this.apiCategoryCreateCategoryPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiCategoryCreateSubcategoryPostRaw(requestParameters: ApiCategoryCreateSubcategoryPostRequest): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Category/CreateSubcategory`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSubcategoryToJSON(requestParameters.createSubcategory),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async apiCategoryCreateSubcategoryPost(requestParameters: ApiCategoryCreateSubcategoryPostRequest): Promise<string> {
        const response = await this.apiCategoryCreateSubcategoryPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiCategoryGetAllCategoriesGetRaw(): Promise<runtime.ApiResponse<Array<CategoryDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Category/GetAllCategories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CategoryDtoFromJSON));
    }

    /**
     */
    async apiCategoryGetAllCategoriesGet(): Promise<Array<CategoryDto>> {
        const response = await this.apiCategoryGetAllCategoriesGetRaw();
        return await response.value();
    }

    /**
     */
    async apiCategoryGetCategoryByIdIdGetRaw(requestParameters: ApiCategoryGetCategoryByIdIdGetRequest): Promise<runtime.ApiResponse<CategoryDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiCategoryGetCategoryByIdIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Category/GetCategoryById/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiCategoryGetCategoryByIdIdGet(requestParameters: ApiCategoryGetCategoryByIdIdGetRequest): Promise<CategoryDto> {
        const response = await this.apiCategoryGetCategoryByIdIdGetRaw(requestParameters);
        return await response.value();
    }

}
